#!/usr/bin/env python
import sys
import logging
import requests
import argparse
import processors

def get_args():
    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers(dest='api')
    processors.ProcessorLatest.add_args(subparsers)
    processors.ProcessorBulk.add_args(subparsers)
    processors.ProcessorStream.add_args(subparsers)
    return parser.parse_args()

def set_log_level(verbose):
    '''set the logger level'''
    level        = logging.ERROR
    module_level = logging.ERROR
    if verbose == 1:
        level        = logging.WARN
    elif verbose == 2:
        level        = logging.INFO
        module_level = logging.WARN
    elif verbose == 3:
        level = logging.DEBUG
        module_level = logging.INFO
    elif verbose > 3:
        module_level = logging.DEBUG
    logging.basicConfig(level=level)
    logging.getLogger('elasticsearch').setLevel(level=level)
    logging.getLogger('requests.packages.urllib3.connectionpool').setLevel(level=module_level)
    logging.getLogger('urllib3.connectionpool').setLevel(level=module_level)
    logging.getLogger('elasticsearch.trace').setLevel(level=module_level)
    requests.packages.urllib3.disable_warnings()

def main():
    args     = get_args()
    set_log_level(args.verbose)
    processor = { 
            'latest' : processors.ProcessorLatest,
            'bulk'   : processors.ProcessorBulk,
            'stream'   : processors.ProcessorStream
            }.get(args.api, processors.Processor)(args)
    processor.process()

if __name__ == '__main__':
    sys.exit(main())
